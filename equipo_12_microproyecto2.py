# -*- coding: utf-8 -*-
"""Equipo#12_Microproyecto2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fS_Mqz0csJHC9k7EzzwSxbjB55KF_OHB

<center>

# **Microproyecto 2 - Clustering** 
# Censo poblacional en USA entre 2010-2015
---
Introducción a la Inteligencia Artificial

---
**Integrantes:**

* Sergio Páez
* Samuel Huertas
* Brayan Caballero

---
</center>

## Carga del data set
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib
import numpy as np
import pandas as pd
import seaborn as sb
from tabulate import tabulate 
import matplotlib.pyplot as plt
from sklearn import preprocessing
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.metrics import pairwise_distances_argmin_min
import re

# %matplotlib inline
from mpl_toolkits.mplot3d import Axes3D
plt.rcParams['figure.figsize'] = (25, 12)
plt.style.use('ggplot')

from google.colab import files
import io

uploaded = files.upload()
censo_df = pd.read_csv(io.BytesIO(uploaded["census.csv"]))

"""## Visualización del dataset"""

censo_df.head()

censo_df.tail()

censo_df.shape

"""Como se puede observar el dataset cuenta con 100 columnas y con 3193 registros. """

censo_df.columns

"""Se van a separar los datos utilizados para realizar el clustering, para realizar esta separación se va a observar primero la relación que tienen las variables entre si.

Cada una de las columnas se explicara a continuación 


*   SUMLEV: es un codigo que utiliza la oficina de censo que indica el tipo geografico. 
*   REGION: territorio donde se realizaron los censos
*   DIVISION: las divisiones censales son agrupaciones de estados que son subdivisiones de las cuatro regiones censales. Hay nueve divisiones censales, que la Oficina del Censo de EE.UU. adoptó en 1910 para la presentación de los datos. Cada división censal se identifica con un código censal de dos dígitos.
*   STATE: es el número del estado.
*   COUNTY: es la divición primaria que se realiza en algunos estados. 
*   STNAME: nombre del estado.
*   CTYNAME: nombre de la ciudad. 
*   CENSUS2010POP: es el censo poblacional realizado en el 2010
*   ESTIMATEBASE2010:
*   POPESTIMATE:
*   NPOPCHG:
*   BIRTHS:
*   DEATHS:
*   NATURALINC:
*   INTERNATIONALMIG:
*   EDOMESTICMIG:
*   NETMIG:
*   RESIDUAL:
*   GQESTIMATEBASE:
*   RBIRTH:
*   RDEATH:
*   RNATURALINC:
*   RINTERATIONALMIG:
*   RDOMESTICMIG:
*   RNETMIG:

## Pre-Procesamiento
"""

# Se eliminan las columnas con las que no se va a trabajar
# Las columnas seleccionadas para trabajar son STNAME	CTYNAME	POPESTIMATE2010	POPESTIMATE2011	POPESTIMATE2012	POPESTIMATE2013	POPESTIMATE2014	POPESTIMATE2015

censo_df_Data=censo_df.drop(['SUMLEV', 'REGION', 'DIVISION', 'STATE', 'COUNTY',
       'CENSUS2010POP', 'ESTIMATESBASE2010', 'NPOPCHG_2010', 'NPOPCHG_2011',
       'NPOPCHG_2012', 'NPOPCHG_2013', 'NPOPCHG_2014', 'NPOPCHG_2015',
       'BIRTHS2010', 'BIRTHS2011', 'BIRTHS2012', 'BIRTHS2013', 'BIRTHS2014',
       'BIRTHS2015', 'DEATHS2010', 'DEATHS2011', 'DEATHS2012', 'DEATHS2013',
       'DEATHS2014', 'DEATHS2015', 'NATURALINC2010', 'NATURALINC2011',
       'NATURALINC2012', 'NATURALINC2013', 'NATURALINC2014', 'NATURALINC2015',
       'INTERNATIONALMIG2010', 'INTERNATIONALMIG2011', 'INTERNATIONALMIG2012',
       'INTERNATIONALMIG2013', 'INTERNATIONALMIG2014', 'INTERNATIONALMIG2015',
       'DOMESTICMIG2010', 'DOMESTICMIG2011', 'DOMESTICMIG2012',
       'DOMESTICMIG2013', 'DOMESTICMIG2014', 'DOMESTICMIG2015', 'NETMIG2010',
       'NETMIG2011', 'NETMIG2012', 'NETMIG2013', 'NETMIG2014', 'NETMIG2015',
       'RESIDUAL2010', 'RESIDUAL2011', 'RESIDUAL2012', 'RESIDUAL2013',
       'RESIDUAL2014', 'RESIDUAL2015', 'GQESTIMATESBASE2010',
       'GQESTIMATES2010', 'GQESTIMATES2011', 'GQESTIMATES2012',
       'GQESTIMATES2013', 'GQESTIMATES2014', 'GQESTIMATES2015', 'RBIRTH2011',
       'RBIRTH2012', 'RBIRTH2013', 'RBIRTH2014', 'RBIRTH2015', 'RDEATH2011',
       'RDEATH2012', 'RDEATH2013', 'RDEATH2014', 'RDEATH2015',
       'RNATURALINC2011', 'RNATURALINC2012', 'RNATURALINC2013',
       'RNATURALINC2014', 'RNATURALINC2015', 'RINTERNATIONALMIG2011',
       'RINTERNATIONALMIG2012', 'RINTERNATIONALMIG2013',
       'RINTERNATIONALMIG2014', 'RINTERNATIONALMIG2015', 'RDOMESTICMIG2011',
       'RDOMESTICMIG2012', 'RDOMESTICMIG2013', 'RDOMESTICMIG2014',
       'RDOMESTICMIG2015', 'RNETMIG2011', 'RNETMIG2012', 'RNETMIG2013',
       'RNETMIG2014', 'RNETMIG2015'],axis=1)

# Se asigna un número a cada estado de los 51 estados registrados en el data set
# se asigna un número a cada ciudad de los 3193 ciudades registrados en el data set

label = preprocessing.LabelEncoder()
censo_df_Data['STNAME'] = label.fit_transform(censo_df_Data['STNAME'].astype(str))
censo_df_Data['CTYNAME'] = label.fit_transform(censo_df_Data['CTYNAME'].astype(str))

censo_df_Data.head()

censo_df_Data.iloc[:, 2:8]

# Se hace un promedio de la población por cada fila de todos los datos en los 6 años desde el 2010 hasta el 2015

lstprom =[]
for i in censo_df_Data.index:
  prom = 0
  for j in range (2,8):
    s = censo_df_Data.iloc[i][j]
    #out = re.sub(r'[^\w\s]','',s)
    prom += int(s)
  prom = prom/6
  lstprom.append(prom)
#arrprom = np.array(lstprom)
promPOPESTIMATE = pd.DataFrame( lstprom, columns = ['POPESTIMATE'])

promPOPESTIMATE.head()

pd.concat([censo_df_Data, promPOPESTIMATE], axis = 1)

"""gráficas de dispersión"""

# Se va a realizar el gráfico de dispersión de la estimación de la población durante los cinco años 
sb.pairplot(censo_df.dropna(),
            height=4, 
            vars=[
       'CENSUS2010POP', 'ESTIMATESBASE2010', 'POPESTIMATE2010',
       'POPESTIMATE2011', 'POPESTIMATE2012', 'POPESTIMATE2013',
       'POPESTIMATE2014', 'POPESTIMATE2015'],
            kind='scatter')
plt.show()

# Se va a realizar el gráfico de dispersión de la estimación de la población durante los cinco años 
sb.pairplot(censo_df.dropna(),
            height=4, 
            vars=[
       'POPESTIMATE2010',
       'POPESTIMATE2011', 'POPESTIMATE2012', 'POPESTIMATE2013',
       'POPESTIMATE2014', 'POPESTIMATE2015'],
            kind='scatter')
plt.show()

"""## Metodos para establecer el número de clusteres"""



"""## Agrupamiento Jeraárquico"""



"""## Análisis de Resultados """

print(censo_df.groupby('STNAME').size())

arrayState = np.array(censo_df['STNAME'].unique())
print(len(arrayState))
arrayCity = np.array(censo_df['CTYNAME'].unique())
print(len(arrayCity))